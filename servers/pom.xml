<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>easyProject.servers</groupId>
    <artifactId>servers</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>apigateway</module>
        <module>dataServer</module>
    </modules>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <version>2.3.2.RELEASE</version>
        <artifactId>spring-boot-starter-parent</artifactId>
    </parent>

    <properties>
        <spring-cloud-alibaba.version>2.2.5.RELEASE</spring-cloud-alibaba.version>
        <spring-cloud.version>2020.0.1</spring-cloud.version>
    </properties>

    <dependencyManagement>
 <!--       <dependency>
            <groupId>org.apache.maven</groupId>依赖的group ID &ndash;&gt;
            <artifactId>maven-artifact</artifactId> 依赖的artifact ID &ndash;&gt;
            <version>3.8.1</version>  依赖的版本号。在 Maven 2 里,也可以配置成版本号的范围 &ndash;&gt;
            <type>jar</type>  它通常表示依赖的文件扩展名 pom意味着只依赖其pom文件
            <classifier></classifier>  依赖的分类器。分类器可以区分属于同一个 POM,但不同构建方式的构件，分类器名被附加到文件名的版本号后面。例如,如果你想要构建两个单独的构件成 JAR , 一个使用 Java 1.4 编译器,另一个使用 Java 6 编译器,你就可以使用分类器来生成两个单独的 JAR 构件
            <scope>test</scope>  依赖范围。在项目发布过程中,帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。常用取值如下所示
			  - compile:默认范围,用于编译
			  - provided:类似于编译,但支持你期待 jdk 或者容器提供,类似于 classpath
			  - runtime:在执行时需要使用
			  - test:用于 test 任务时使用
			  - system:需要外在提供相应的元素,通过 systemPath 来取得
			  - systemPath:仅用于范围为 system,提供相应的路径
			  - optional:当项目自身被依赖时,标注依赖是否传递。用于连续依赖时使用
            <systemPath></systemPath>  仅供 scope 为 system 范围使用。注意,不鼓励使用这个元素,并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径,例如 ${java.home} &ndash;&gt;
              当计算传递依赖时,从依赖构件列表里,列出被排除的依赖构件集，即告诉 maven 你只依赖指定的项目,不依赖下面的依赖。此元素主要用于解决版本冲突问题 &ndash;&gt;
            <exclusions>
                <exclusion>
                    <artifactId>spring-core</artifactId>
                    <groupId>org.springframework</groupId>
                </exclusion>
            </exclusions>
            <optional>true</optional>  可选依赖,如果你在项目 B 中把 C 依赖声明为可选,你就需要在依赖于 B 的项目（例如项目 A）中显式的引用对 C 的依赖。可选依赖阻断依赖的传递性
        </dependency>-->
        <dependencies>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.2.5.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
<!--    nacos配置中心，注意版本号需要和spring-boot-starter-parent版本保持一致，否则报错-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
<!--    nacos注册中心-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>


<!--        实体类lombok插件，简化实体类代码-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
<!--        异步注解@Async自定义线程池-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>30.1.1-jre</version>
        </dependency>
    </dependencies>
</project>